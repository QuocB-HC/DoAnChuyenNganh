// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: image.sql

package database

import (
	"context"
)

const deleteImage = `-- name: DeleteImage :exec
UPDATE ` + "`" + `ecommerce_go_image` + "`" + `
SET
    ` + "`" + `is_deleted` + "`" + ` = 1
WHERE
    ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) DeleteImage(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteImage, id)
	return err
}

const getImages = `-- name: GetImages :many
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `image` + "`" + `
FROM
    ` + "`" + `ecommerce_go_image` + "`" + `
WHERE
    ` + "`" + `accommodation_detail_id` + "`" + ` = ? and ` + "`" + `is_deleted` + "`" + ` = 0
`

type GetImagesRow struct {
	ID    string
	Image string
}

func (q *Queries) GetImages(ctx context.Context, accommodationDetailID string) ([]GetImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getImages, accommodationDetailID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetImagesRow
	for rows.Next() {
		var i GetImagesRow
		if err := rows.Scan(&i.ID, &i.Image); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveImage = `-- name: SaveImage :exec
INSERT INTO
    ` + "`" + `ecommerce_go_image` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `accommodation_detail_id` + "`" + `,
        ` + "`" + `image` + "`" + `,
        ` + "`" + `is_deleted` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `
    )
VALUES
    (?, ?, ?, 0, ?, ?)
`

type SaveImageParams struct {
	ID                    string
	AccommodationDetailID string
	Image                 string
	CreatedAt             uint64
	UpdatedAt             uint64
}

func (q *Queries) SaveImage(ctx context.Context, arg SaveImageParams) error {
	_, err := q.db.ExecContext(ctx, saveImage,
		arg.ID,
		arg.AccommodationDetailID,
		arg.Image,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
