// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

type EcommerceGoDiscountDiscountType string

const (
	EcommerceGoDiscountDiscountTypeFixed      EcommerceGoDiscountDiscountType = "fixed"
	EcommerceGoDiscountDiscountTypePercentage EcommerceGoDiscountDiscountType = "percentage"
)

func (e *EcommerceGoDiscountDiscountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EcommerceGoDiscountDiscountType(s)
	case string:
		*e = EcommerceGoDiscountDiscountType(s)
	default:
		return fmt.Errorf("unsupported scan type for EcommerceGoDiscountDiscountType: %T", src)
	}
	return nil
}

type NullEcommerceGoDiscountDiscountType struct {
	EcommerceGoDiscountDiscountType EcommerceGoDiscountDiscountType
	Valid                           bool // Valid is true if EcommerceGoDiscountDiscountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEcommerceGoDiscountDiscountType) Scan(value interface{}) error {
	if value == nil {
		ns.EcommerceGoDiscountDiscountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EcommerceGoDiscountDiscountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEcommerceGoDiscountDiscountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EcommerceGoDiscountDiscountType), nil
}

type EcommerceGoOrderOrderStatus string

const (
	EcommerceGoOrderOrderStatusPendingPayment EcommerceGoOrderOrderStatus = "pending_payment"
	EcommerceGoOrderOrderStatusPaymentFailed  EcommerceGoOrderOrderStatus = "payment_failed"
	EcommerceGoOrderOrderStatusPaymentSuccess EcommerceGoOrderOrderStatus = "payment_success"
	EcommerceGoOrderOrderStatusCheckedIn      EcommerceGoOrderOrderStatus = "checked_in"
	EcommerceGoOrderOrderStatusCompleted      EcommerceGoOrderOrderStatus = "completed"
	EcommerceGoOrderOrderStatusCanceled       EcommerceGoOrderOrderStatus = "canceled"
	EcommerceGoOrderOrderStatusRefunded       EcommerceGoOrderOrderStatus = "refunded"
)

func (e *EcommerceGoOrderOrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EcommerceGoOrderOrderStatus(s)
	case string:
		*e = EcommerceGoOrderOrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EcommerceGoOrderOrderStatus: %T", src)
	}
	return nil
}

type NullEcommerceGoOrderOrderStatus struct {
	EcommerceGoOrderOrderStatus EcommerceGoOrderOrderStatus
	Valid                       bool // Valid is true if EcommerceGoOrderOrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEcommerceGoOrderOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EcommerceGoOrderOrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EcommerceGoOrderOrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEcommerceGoOrderOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EcommerceGoOrderOrderStatus), nil
}

type EcommerceGoPaymentPaymentMethod string

const (
	EcommerceGoPaymentPaymentMethodCash EcommerceGoPaymentPaymentMethod = "cash"
	EcommerceGoPaymentPaymentMethodCard EcommerceGoPaymentPaymentMethod = "card"
)

func (e *EcommerceGoPaymentPaymentMethod) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EcommerceGoPaymentPaymentMethod(s)
	case string:
		*e = EcommerceGoPaymentPaymentMethod(s)
	default:
		return fmt.Errorf("unsupported scan type for EcommerceGoPaymentPaymentMethod: %T", src)
	}
	return nil
}

type NullEcommerceGoPaymentPaymentMethod struct {
	EcommerceGoPaymentPaymentMethod EcommerceGoPaymentPaymentMethod
	Valid                           bool // Valid is true if EcommerceGoPaymentPaymentMethod is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEcommerceGoPaymentPaymentMethod) Scan(value interface{}) error {
	if value == nil {
		ns.EcommerceGoPaymentPaymentMethod, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EcommerceGoPaymentPaymentMethod.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEcommerceGoPaymentPaymentMethod) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EcommerceGoPaymentPaymentMethod), nil
}

type EcommerceGoPaymentPaymentStatus string

const (
	EcommerceGoPaymentPaymentStatusFailed   EcommerceGoPaymentPaymentStatus = "failed"
	EcommerceGoPaymentPaymentStatusSuccess  EcommerceGoPaymentPaymentStatus = "success"
	EcommerceGoPaymentPaymentStatusRefunded EcommerceGoPaymentPaymentStatus = "refunded"
)

func (e *EcommerceGoPaymentPaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EcommerceGoPaymentPaymentStatus(s)
	case string:
		*e = EcommerceGoPaymentPaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EcommerceGoPaymentPaymentStatus: %T", src)
	}
	return nil
}

type NullEcommerceGoPaymentPaymentStatus struct {
	EcommerceGoPaymentPaymentStatus EcommerceGoPaymentPaymentStatus
	Valid                           bool // Valid is true if EcommerceGoPaymentPaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEcommerceGoPaymentPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EcommerceGoPaymentPaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EcommerceGoPaymentPaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEcommerceGoPaymentPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EcommerceGoPaymentPaymentStatus), nil
}

type EcommerceGoUserOperatorUserType string

const (
	EcommerceGoUserOperatorUserTypeAdmin   EcommerceGoUserOperatorUserType = "admin"
	EcommerceGoUserOperatorUserTypeManager EcommerceGoUserOperatorUserType = "manager"
)

func (e *EcommerceGoUserOperatorUserType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EcommerceGoUserOperatorUserType(s)
	case string:
		*e = EcommerceGoUserOperatorUserType(s)
	default:
		return fmt.Errorf("unsupported scan type for EcommerceGoUserOperatorUserType: %T", src)
	}
	return nil
}

type NullEcommerceGoUserOperatorUserType struct {
	EcommerceGoUserOperatorUserType EcommerceGoUserOperatorUserType
	Valid                           bool // Valid is true if EcommerceGoUserOperatorUserType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEcommerceGoUserOperatorUserType) Scan(value interface{}) error {
	if value == nil {
		ns.EcommerceGoUserOperatorUserType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EcommerceGoUserOperatorUserType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEcommerceGoUserOperatorUserType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EcommerceGoUserOperatorUserType), nil
}

type EcommerceGoVoucherDiscountType string

const (
	EcommerceGoVoucherDiscountTypeFixed      EcommerceGoVoucherDiscountType = "fixed"
	EcommerceGoVoucherDiscountTypePercentage EcommerceGoVoucherDiscountType = "percentage"
)

func (e *EcommerceGoVoucherDiscountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EcommerceGoVoucherDiscountType(s)
	case string:
		*e = EcommerceGoVoucherDiscountType(s)
	default:
		return fmt.Errorf("unsupported scan type for EcommerceGoVoucherDiscountType: %T", src)
	}
	return nil
}

type NullEcommerceGoVoucherDiscountType struct {
	EcommerceGoVoucherDiscountType EcommerceGoVoucherDiscountType
	Valid                          bool // Valid is true if EcommerceGoVoucherDiscountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEcommerceGoVoucherDiscountType) Scan(value interface{}) error {
	if value == nil {
		ns.EcommerceGoVoucherDiscountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EcommerceGoVoucherDiscountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEcommerceGoVoucherDiscountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EcommerceGoVoucherDiscountType), nil
}

// accommodation table
type EcommerceGoAccommodation struct {
	// ID
	ID string
	// manager ID
	ManagerID string
	// name
	Name string
	// country
	Country string
	// city
	City string
	// district
	District string
	// address
	Address string
	// description
	Description string
	// facilities
	Facilities json.RawMessage
	// rating
	Rating uint8
	// google map address
	GgMap string
	// rules
	Rules json.RawMessage
	// is verified: 0 - unverified, 1 - verified
	IsVerified uint8
	// is deleted: 0 - not deleted; 1 - deleted
	IsDeleted uint8
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// accommodation detail table
type EcommerceGoAccommodationDetail struct {
	// ID
	ID string
	// accommodation ID
	AccommodationID string
	// accommodation type
	Name string
	// number of guests
	Guests uint8
	// number of beds
	Beds json.RawMessage
	// facilities
	Facilities json.RawMessage
	// available rooms
	AvailableRooms uint8
	// price
	Price uint32
	// discount ID
	DiscountID sql.NullString
	// is verified: 0 - unverified, 1 - verified
	IsVerified uint8
	// is deleted: 0 - not deleted; 1 - deleted
	IsDeleted uint8
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// facility table
type EcommerceGoAccommodationDetailFacility struct {
	// ID
	ID string
	// name
	Name string
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// accommodation detail image table
type EcommerceGoAccommodationDetailImage struct {
	// ID
	ID string
	// accommodation detail ID
	AccommodationDetailID string
	// image
	Image string
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// facility table
type EcommerceGoAccommodationFacility struct {
	// ID
	ID string
	// image
	Image string
	// name
	Name string
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// accommodation image table
type EcommerceGoAccommodationImage struct {
	// ID
	ID string
	// accommodation ID
	AccommodationID string
	// image
	Image string
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// discount table
type EcommerceGoDiscount struct {
	// ID
	ID string
	// user operator ID
	UserOperatorID string
	// name
	Name string
	// description
	Description sql.NullString
	// discount type
	DiscountType EcommerceGoDiscountDiscountType
	// discount value
	DiscountValue string
	// is deleted: 0 - not deleted; 1 - deleted
	IsDeleted uint8
	// 0 - inactivated; 1 - activated
	IsActive uint8
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// order table
type EcommerceGoOrder struct {
	// ID
	ID string
	// user base ID
	UserID string
	// final total
	FinalTotal uint32
	// order id external
	OrderIDExternal string
	// order status
	OrderStatus EcommerceGoOrderOrderStatus
	// accommodation ID
	AccommodationID string
	// voucher ID
	VoucherID sql.NullString
	// Checkin date
	CheckinDate uint64
	// checkout date
	CheckoutDate uint64
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// order detail table
type EcommerceGoOrderDetail struct {
	// ID
	ID string
	// order ID
	OrderID string
	// price
	Price uint32
	// accommodation detail ID
	AccommodationDetailID string
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// payment table
type EcommerceGoPayment struct {
	// ID
	ID string
	// order ID
	OrderID string
	// payment status
	PaymentStatus EcommerceGoPaymentPaymentStatus
	// payment method
	PaymentMethod EcommerceGoPaymentPaymentMethod
	// total price
	TotalPrice uint32
	// transaction id
	TransactionID sql.NullString
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// review table
type EcommerceGoReview struct {
	// ID
	ID string
	// user ID
	UserID string
	// accommodation ID
	AccommodationID string
	// comment
	Comment string
	// title
	Title string
	// rating
	Rating uint8
	// manager response
	ManagerResponse sql.NullString
	// is deleted: 0 - not deleted; 1 - deleted
	IsDeleted uint8
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// user admin table
type EcommerceGoUserAdmin struct {
	// ID
	ID string
	// account: email or SMS
	Account string
	// user name
	UserName string
	// password
	Password string
	// login time
	LoginTime uint64
	// logout time
	LogoutTime uint64
	// login IP
	LoginIp string
	// is deleted: 0 - not deleted; 1 - deleted
	IsDeleted uint8
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// user base table
type EcommerceGoUserBase struct {
	// ID
	ID string
	// account: email or SMS
	Account string
	// password
	Password string
	// login time
	LoginTime uint64
	// logout time
	LogoutTime uint64
	// login IP
	LoginIp string
	// is verified: 0 - unverified, 1 - verified
	IsVerified uint8
	// is deleted: 0 - not deleted; 1 - deleted
	IsDeleted uint8
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// user info table
type EcommerceGoUserInfo struct {
	// ID
	ID string
	// account
	Account string
	// user name
	UserName string
	// image
	Image string
	// status: 0-locked, 1-actived, 2-not activated
	Status uint8
	// phone
	Phone string
	// gender: 0-male, 1-female
	Gender uint8
	// birthday
	Birthday uint64
	// email
	Email string
	// authentication status: 0-not authenticated, 1-pending ,2-authenticated
	IsAuthentication uint8
	// is deleted: 0 - not deleted; 1 - deleted
	IsDeleted uint8
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// user manager table
type EcommerceGoUserManager struct {
	// ID
	ID string
	// account: email or SMS
	Account string
	// user name
	UserName string
	// password
	Password string
	// login time
	LoginTime uint64
	// logout time
	LogoutTime uint64
	// login IP
	LoginIp string
	// is deleted: 0 - not deleted; 1 - deleted
	IsDeleted uint8
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// user operator table
type EcommerceGoUserOperator struct {
	// ID
	ID string
	// user ID
	UserID   string
	UserType EcommerceGoUserOperatorUserType
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// user verify table
type EcommerceGoUserVerify struct {
	// ID
	ID string
	// OTP
	Otp string
	// email or SMS
	VerifyKey string
	// hash email or SMS
	KeyHash string
	// type: 0 - SMS; 1 - email
	Type uint8
	// is verified: 0 - unverified, 1 - verified
	IsVerified uint8
	// is deleted: 0 - not deleted; 1 - deleted
	IsDeleted uint8
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}

// voucher table
type EcommerceGoVoucher struct {
	// ID
	ID string
	// user operator ID
	UserOperatorID string
	// code
	Code string
	// discount type
	DiscountType EcommerceGoVoucherDiscountType
	// discount value
	DiscountValue string
	// is deleted: 0 - not deleted; 1 - deleted
	IsDeleted uint8
	// 0 - inactivated; 1 - activated
	IsActive uint8
	// created at
	CreatedAt uint64
	// updated at
	UpdatedAt uint64
}
