// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: facility_detail.sql

package database

import (
	"context"
)

const createAccommodationFacilityDetail = `-- name: CreateAccommodationFacilityDetail :exec
INSERT INTO
    ` + "`" + `ecommerce_go_accommodation_detail_facility` + "`" + ` (` + "`" + `id` + "`" + `, ` + "`" + `name` + "`" + `, ` + "`" + `created_at` + "`" + `, ` + "`" + `updated_at` + "`" + `)
VALUES
    (?, ?, ?, ?)
`

type CreateAccommodationFacilityDetailParams struct {
	ID        string
	Name      string
	CreatedAt uint64
	UpdatedAt uint64
}

func (q *Queries) CreateAccommodationFacilityDetail(ctx context.Context, arg CreateAccommodationFacilityDetailParams) error {
	_, err := q.db.ExecContext(ctx, createAccommodationFacilityDetail,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getAccommodationFacilityDetail = `-- name: GetAccommodationFacilityDetail :many
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `name` + "`" + `
FROM
    ` + "`" + `ecommerce_go_accommodation_detail_facility` + "`" + `
`

type GetAccommodationFacilityDetailRow struct {
	ID   string
	Name string
}

func (q *Queries) GetAccommodationFacilityDetail(ctx context.Context) ([]GetAccommodationFacilityDetailRow, error) {
	rows, err := q.db.QueryContext(ctx, getAccommodationFacilityDetail)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccommodationFacilityDetailRow
	for rows.Next() {
		var i GetAccommodationFacilityDetailRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccommodationFacilityDetailById = `-- name: GetAccommodationFacilityDetailById :one
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `name` + "`" + `
FROM
    ` + "`" + `ecommerce_go_accommodation_detail_facility` + "`" + `
WHERE
    ` + "`" + `id` + "`" + ` = ?
`

type GetAccommodationFacilityDetailByIdRow struct {
	ID   string
	Name string
}

func (q *Queries) GetAccommodationFacilityDetailById(ctx context.Context, id string) (GetAccommodationFacilityDetailByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAccommodationFacilityDetailById, id)
	var i GetAccommodationFacilityDetailByIdRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
