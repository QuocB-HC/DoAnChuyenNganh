// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: review.sql

package database

import (
	"context"
)

const createReview = `-- name: CreateReview :exec
INSERT INTO
    ` + "`" + `ecommerce_go_review` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `user_id` + "`" + `,
        ` + "`" + `accommodation_id` + "`" + `,
        ` + "`" + `comment` + "`" + `,
        ` + "`" + `rating` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?)
`

type CreateReviewParams struct {
	ID              string
	UserID          string
	AccommodationID string
	Comment         string
	Rating          uint8
	CreatedAt       uint64
	UpdatedAt       uint64
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) error {
	_, err := q.db.ExecContext(ctx, createReview,
		arg.ID,
		arg.UserID,
		arg.AccommodationID,
		arg.Comment,
		arg.Rating,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteReview = `-- name: DeleteReview :exec
UPDATE ` + "`" + `ecommerce_go_review` + "`" + `
SET
    ` + "`" + `is_deleted` + "`" + ` = 1
WHERE
    ` + "`" + `id` + "`" + ` = ?
    and ` + "`" + `accommodation_id` + "`" + ` = ?
`

type DeleteReviewParams struct {
	ID              string
	AccommodationID string
}

func (q *Queries) DeleteReview(ctx context.Context, arg DeleteReviewParams) error {
	_, err := q.db.ExecContext(ctx, deleteReview, arg.ID, arg.AccommodationID)
	return err
}

const getReviews = `-- name: GetReviews :many
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `comment` + "`" + `,
    ` + "`" + `rating` + "`" + `,
    ` + "`" + `manager_response` + "`" + `,
    ` + "`" + `created_at` + "`" + `
FROM
    ` + "`" + `ecommerce_go_review` + "`" + `
WHERE
    ` + "`" + `accommodation_id` + "`" + ` = ?
`

type GetReviewsRow struct {
	ID              string
	Comment         string
	Rating          uint8
	ManagerResponse string
	CreatedAt       uint64
}

func (q *Queries) GetReviews(ctx context.Context, accommodationID string) ([]GetReviewsRow, error) {
	rows, err := q.db.QueryContext(ctx, getReviews, accommodationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReviewsRow
	for rows.Next() {
		var i GetReviewsRow
		if err := rows.Scan(
			&i.ID,
			&i.Comment,
			&i.Rating,
			&i.ManagerResponse,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :exec
UPDATE ` + "`" + `ecommerce_go_review` + "`" + `
SET
    ` + "`" + `comment` + "`" + ` = ?,
    ` + "`" + `rating` + "`" + ` = ?,
    ` + "`" + `manager_response` + "`" + ` = ?
WHERE
    ` + "`" + `id` + "`" + ` = ?
    and ` + "`" + `user_id` + "`" + ` = ?
`

type UpdateReviewParams struct {
	Comment         string
	Rating          uint8
	ManagerResponse string
	ID              string
	UserID          string
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) error {
	_, err := q.db.ExecContext(ctx, updateReview,
		arg.Comment,
		arg.Rating,
		arg.ManagerResponse,
		arg.ID,
		arg.UserID,
	)
	return err
}
