// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_admin.sql

package database

import (
	"context"
)

const createUserAdmin = `-- name: CreateUserAdmin :exec
INSERT INTO
    ` + "`" + `ecommerce_go_user_admin` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `account` + "`" + `,
        ` + "`" + `password` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `
    )
VALUES
    (?, ?, ?, ?, ?)
`

type CreateUserAdminParams struct {
	ID        string
	Account   string
	Password  string
	CreatedAt uint64
	UpdatedAt uint64
}

func (q *Queries) CreateUserAdmin(ctx context.Context, arg CreateUserAdminParams) error {
	_, err := q.db.ExecContext(ctx, createUserAdmin,
		arg.ID,
		arg.Account,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteUserAdmin = `-- name: DeleteUserAdmin :exec
UPDATE ` + "`" + `ecommerce_go_user_admin` + "`" + `
SET
    ` + "`" + `is_deleted` + "`" + ` = 1
WHERE
    ` + "`" + `account` + "`" + ` = ?
`

func (q *Queries) DeleteUserAdmin(ctx context.Context, account string) error {
	_, err := q.db.ExecContext(ctx, deleteUserAdmin, account)
	return err
}

const getUserAdmin = `-- name: GetUserAdmin :one
SELECT
    ` + "`" + `account` + "`" + `
FROM
    ` + "`" + `ecommerce_go_user_admin` + "`" + `
WHERE
    ` + "`" + `account` + "`" + ` = ?
    AND ` + "`" + `is_deleted` + "`" + ` = 0
`

func (q *Queries) GetUserAdmin(ctx context.Context, account string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserAdmin, account)
	err := row.Scan(&account)
	return account, err
}
