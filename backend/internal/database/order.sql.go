// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package database

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO
    ` + "`" + `ecommerce_go_order` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `user_id` + "`" + `,
        ` + "`" + `final_total` + "`" + `,
        ` + "`" + `order_status` + "`" + `,
        ` + "`" + `accommodation_id` + "`" + `,
        ` + "`" + `voucher_id` + "`" + `,
        ` + "`" + `checkin_date` + "`" + `,
        ` + "`" + `checkout_date` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `

    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateOrderParams struct {
	ID              string
	UserID          string
	FinalTotal      uint32
	OrderStatus     EcommerceGoOrderOrderStatus
	AccommodationID string
	VoucherID       sql.NullString
	CheckinDate     uint64
	CheckoutDate    uint64
	CreatedAt       uint64
	UpdatedAt       uint64
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.ID,
		arg.UserID,
		arg.FinalTotal,
		arg.OrderStatus,
		arg.AccommodationID,
		arg.VoucherID,
		arg.CheckinDate,
		arg.CheckoutDate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getOrdersByUser = `-- name: GetOrdersByUser :many
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `final_total` + "`" + `,
    ` + "`" + `order_status` + "`" + `,
    -- ` + "`" + `voucher_id` + "`" + `,
    ` + "`" + `checkin_date` + "`" + `,
    ` + "`" + `checkout_date` + "`" + `,
    ` + "`" + `created_at` + "`" + `,
    ` + "`" + `updated_at` + "`" + `
FROM
    ` + "`" + `ecommerce_go_order` + "`" + `
WHERE
    ` + "`" + `user_id` + "`" + ` = ?
`

type GetOrdersByUserRow struct {
	ID           string
	FinalTotal   uint32
	OrderStatus  EcommerceGoOrderOrderStatus
	CheckinDate  uint64
	CheckoutDate uint64
	CreatedAt    uint64
	UpdatedAt    uint64
}

func (q *Queries) GetOrdersByUser(ctx context.Context, userID string) ([]GetOrdersByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersByUserRow
	for rows.Next() {
		var i GetOrdersByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.FinalTotal,
			&i.OrderStatus,
			&i.CheckinDate,
			&i.CheckoutDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE ` + "`" + `ecommerce_go_order` + "`" + `
SET
    ` + "`" + `order_status` + "`" + ` = ?,
    ` + "`" + `updated_at` + "`" + ` = ?
WHERE
    ` + "`" + `id` + "`" + ` = ?
`

type UpdateOrderStatusParams struct {
	OrderStatus EcommerceGoOrderOrderStatus
	UpdatedAt   uint64
	ID          string
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.OrderStatus, arg.UpdatedAt, arg.ID)
	return err
}
