// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_info.sql

package database

import (
	"context"
)

const createUserInfo = `-- name: CreateUserInfo :exec
INSERT INTO
    ` + "`" + `ecommerce_go_user_info` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `account` + "`" + `,
        ` + "`" + `status` + "`" + `,
        ` + "`" + `is_authentication` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `
    )
VALUES
    (?, ?, ?, ?, ?, ?)
`

type CreateUserInfoParams struct {
	ID               string
	Account          string
	Status           uint8
	IsAuthentication uint8
	CreatedAt        uint64
	UpdatedAt        uint64
}

func (q *Queries) CreateUserInfo(ctx context.Context, arg CreateUserInfoParams) error {
	_, err := q.db.ExecContext(ctx, createUserInfo,
		arg.ID,
		arg.Account,
		arg.Status,
		arg.IsAuthentication,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteUserInfo = `-- name: DeleteUserInfo :exec
DELETE FROM ` + "`" + `ecommerce_go_user_info` + "`" + `
WHERE
    ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) DeleteUserInfo(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUserInfo, id)
	return err
}

const getNameAndImageUserInfo = `-- name: GetNameAndImageUserInfo :one
SELECT
    ` + "`" + `user_name` + "`" + `,
    ` + "`" + `image` + "`" + `
FROM
    ` + "`" + `ecommerce_go_user_info` + "`" + `
WHERE
    ` + "`" + `account` + "`" + ` = ?
LIMIT
    1
`

type GetNameAndImageUserInfoRow struct {
	UserName string
	Image    string
}

func (q *Queries) GetNameAndImageUserInfo(ctx context.Context, account string) (GetNameAndImageUserInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getNameAndImageUserInfo, account)
	var i GetNameAndImageUserInfoRow
	err := row.Scan(&i.UserName, &i.Image)
	return i, err
}

const getUserInfo = `-- name: GetUserInfo :one
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `account` + "`" + `,
    ` + "`" + `user_name` + "`" + `,
    ` + "`" + `image` + "`" + `,
    ` + "`" + `status` + "`" + `,
    ` + "`" + `phone` + "`" + `,
    ` + "`" + `gender` + "`" + `,
    ` + "`" + `birthday` + "`" + `,
    ` + "`" + `email` + "`" + `,
    ` + "`" + `is_authentication` + "`" + `
FROM
    ` + "`" + `ecommerce_go_user_info` + "`" + `
WHERE
    ` + "`" + `account` + "`" + ` = ?
LIMIT
    1
`

type GetUserInfoRow struct {
	ID               string
	Account          string
	UserName         string
	Image            string
	Status           uint8
	Phone            string
	Gender           uint8
	Birthday         uint64
	Email            string
	IsAuthentication uint8
}

func (q *Queries) GetUserInfo(ctx context.Context, account string) (GetUserInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getUserInfo, account)
	var i GetUserInfoRow
	err := row.Scan(
		&i.ID,
		&i.Account,
		&i.UserName,
		&i.Image,
		&i.Status,
		&i.Phone,
		&i.Gender,
		&i.Birthday,
		&i.Email,
		&i.IsAuthentication,
	)
	return i, err
}

const getUserInfos = `-- name: GetUserInfos :many
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `account` + "`" + `,
    ` + "`" + `user_name` + "`" + `,
    ` + "`" + `image` + "`" + `,
    ` + "`" + `status` + "`" + `,
    ` + "`" + `phone` + "`" + `,
    ` + "`" + `gender` + "`" + `,
    ` + "`" + `birthday` + "`" + `,
    ` + "`" + `email` + "`" + `,
    ` + "`" + `is_authentication` + "`" + `
FROM
    ` + "`" + `ecommerce_go_user_info` + "`" + `
WHERE
    ` + "`" + `id` + "`" + ` IN (?)
`

type GetUserInfosRow struct {
	ID               string
	Account          string
	UserName         string
	Image            string
	Status           uint8
	Phone            string
	Gender           uint8
	Birthday         uint64
	Email            string
	IsAuthentication uint8
}

func (q *Queries) GetUserInfos(ctx context.Context, id string) ([]GetUserInfosRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserInfos, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserInfosRow
	for rows.Next() {
		var i GetUserInfosRow
		if err := rows.Scan(
			&i.ID,
			&i.Account,
			&i.UserName,
			&i.Image,
			&i.Status,
			&i.Phone,
			&i.Gender,
			&i.Birthday,
			&i.Email,
			&i.IsAuthentication,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserInfo = `-- name: UpdateUserInfo :exec
UPDATE ` + "`" + `ecommerce_go_user_info` + "`" + `
SET
    ` + "`" + `user_name` + "`" + ` = ?,
    ` + "`" + `image` + "`" + ` = ?,
    ` + "`" + `phone` + "`" + ` = ?,
    ` + "`" + `gender` + "`" + ` = ?,
    ` + "`" + `birthday` + "`" + ` = ?,
    ` + "`" + `email` + "`" + ` = ?,
    ` + "`" + `updated_at` + "`" + ` = ?
WHERE
    ` + "`" + `id` + "`" + ` = ?
    AND ` + "`" + `is_authentication` + "`" + ` = 1
`

type UpdateUserInfoParams struct {
	UserName  string
	Image     string
	Phone     string
	Gender    uint8
	Birthday  uint64
	Email     string
	UpdatedAt uint64
	ID        string
}

func (q *Queries) UpdateUserInfo(ctx context.Context, arg UpdateUserInfoParams) error {
	_, err := q.db.ExecContext(ctx, updateUserInfo,
		arg.UserName,
		arg.Image,
		arg.Phone,
		arg.Gender,
		arg.Birthday,
		arg.Email,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
