// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: stat.sql

package database

import (
	"context"
)

const monthlyEarnings = `-- name: MonthlyEarnings :many
SELECT
    FROM_UNIXTIME (o.created_at / 1000, '%Y-%m') AS ` + "`" + `revenue_month` + "`" + `,
    CAST(SUM(p.total_price) AS SIGNED) AS` + "`" + `total_revenue` + "`" + `
FROM
    ` + "`" + `ecommerce_go_payment` + "`" + ` ` + "`" + `p` + "`" + `
    JOIN ` + "`" + `ecommerce_go_order` + "`" + ` ` + "`" + `o` + "`" + ` ON p.order_id = o.id
WHERE
    p.payment_status = 'success'
    AND o.user_id = ?
    AND YEAR(FROM_UNIXTIME(o.created_at / 1000)) = ?
GROUP BY
    ` + "`" + `revenue_month` + "`" + `
ORDER BY
    ` + "`" + `revenue_month` + "`" + ` ASC
`

type MonthlyEarningsParams struct {
	UserID    string
	CreatedAt uint64
}

type MonthlyEarningsRow struct {
	RevenueMonth string
	TotalRevenue int64
}

func (q *Queries) MonthlyEarnings(ctx context.Context, arg MonthlyEarningsParams) ([]MonthlyEarningsRow, error) {
	rows, err := q.db.QueryContext(ctx, monthlyEarnings, arg.UserID, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MonthlyEarningsRow
	for rows.Next() {
		var i MonthlyEarningsRow
		if err := rows.Scan(&i.RevenueMonth, &i.TotalRevenue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
