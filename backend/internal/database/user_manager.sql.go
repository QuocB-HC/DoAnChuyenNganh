// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_manager.sql

package database

import (
	"context"
)

const checkUserManagerExistsByID = `-- name: CheckUserManagerExistsByID :one
SELECT
    COUNT(*)
FROM
    ` + "`" + `ecommerce_go_user_manager` + "`" + `
WHERE
    ` + "`" + `id` + "`" + ` = ?
    AND ` + "`" + `is_deleted` + "`" + ` = 0
`

func (q *Queries) CheckUserManagerExistsByID(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserManagerExistsByID, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserManage = `-- name: CreateUserManage :exec
INSERT INTO
    ` + "`" + `ecommerce_go_user_manager` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `account` + "`" + `,
        ` + "`" + `password` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `
    )
VALUES
    (?, ?, ?, ?, ?)
`

type CreateUserManageParams struct {
	ID        string
	Account   string
	Password  string
	CreatedAt uint64
	UpdatedAt uint64
}

func (q *Queries) CreateUserManage(ctx context.Context, arg CreateUserManageParams) error {
	_, err := q.db.ExecContext(ctx, createUserManage,
		arg.ID,
		arg.Account,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteUserManager = `-- name: DeleteUserManager :exec
UPDATE ` + "`" + `ecommerce_go_user_manager` + "`" + `
SET
    ` + "`" + `is_deleted` + "`" + ` = 1
WHERE
    ` + "`" + `account` + "`" + ` = ?
`

func (q *Queries) DeleteUserManager(ctx context.Context, account string) error {
	_, err := q.db.ExecContext(ctx, deleteUserManager, account)
	return err
}
