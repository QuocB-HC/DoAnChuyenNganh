// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: facility.sql

package database

import (
	"context"
)

const createFacility = `-- name: CreateFacility :exec
INSERT INTO
    ` + "`" + `ecommerce_go_facility` + "`" + ` (` + "`" + `id` + "`" + `, ` + "`" + `image` + "`" + `, ` + "`" + `name` + "`" + `, ` + "`" + `created_at` + "`" + `, ` + "`" + `updated_at` + "`" + `)
VALUES
    (?, ?, ?, ?, ?)
`

type CreateFacilityParams struct {
	ID        string
	Image     string
	Name      string
	CreatedAt uint64
	UpdatedAt uint64
}

func (q *Queries) CreateFacility(ctx context.Context, arg CreateFacilityParams) error {
	_, err := q.db.ExecContext(ctx, createFacility,
		arg.ID,
		arg.Image,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getFacilityById = `-- name: GetFacilityById :one
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `image` + "`" + `,
    ` + "`" + `name` + "`" + `
FROM
    ` + "`" + `ecommerce_go_facility` + "`" + `
WHERE
    ` + "`" + `id` + "`" + ` = ?
`

type GetFacilityByIdRow struct {
	ID    string
	Image string
	Name  string
}

func (q *Queries) GetFacilityById(ctx context.Context, id string) (GetFacilityByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getFacilityById, id)
	var i GetFacilityByIdRow
	err := row.Scan(&i.ID, &i.Image, &i.Name)
	return i, err
}
