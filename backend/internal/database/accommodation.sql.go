// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: accommodation.sql

package database

import (
	"context"
	"encoding/json"
)

const createAccommodation = `-- name: CreateAccommodation :exec
INSERT INTO
    ` + "`" + `ecommerce_go_accommodation` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `manager_id` + "`" + `,
        ` + "`" + `name` + "`" + `,
        ` + "`" + `city` + "`" + `,
        ` + "`" + `provine` + "`" + `,
        ` + "`" + `district` + "`" + `,
        ` + "`" + `images` + "`" + `,
        ` + "`" + `description` + "`" + `,
        ` + "`" + `facilities` + "`" + `,
        ` + "`" + `gg_map` + "`" + `,
        ` + "`" + `property_surroundings` + "`" + `,
        ` + "`" + `rules` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateAccommodationParams struct {
	ID                   string
	ManagerID            string
	Name                 string
	City                 string
	Provine              string
	District             string
	Images               string
	Description          string
	Facilities           json.RawMessage
	GgMap                string
	PropertySurroundings json.RawMessage
	Rules                string
	CreatedAt            uint64
	UpdatedAt            uint64
}

func (q *Queries) CreateAccommodation(ctx context.Context, arg CreateAccommodationParams) error {
	_, err := q.db.ExecContext(ctx, createAccommodation,
		arg.ID,
		arg.ManagerID,
		arg.Name,
		arg.City,
		arg.Provine,
		arg.District,
		arg.Images,
		arg.Description,
		arg.Facilities,
		arg.GgMap,
		arg.PropertySurroundings,
		arg.Rules,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
